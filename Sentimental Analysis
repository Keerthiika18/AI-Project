pip install nltk pandas scikit-learn
import nltk
import random
import pandas as pd
from nltk.corpus import twitter_samples
from nltk.tokenize import TweetTokenizer
from nltk.corpus import stopwords
from nltk.classify import NaiveBayesClassifier
from nltk.classify.util import accuracy
import string

# Download required NLTK resources
nltk.download('twitter_samples')
nltk.download('punkt')
nltk.download('stopwords')

# Load positive and negative tweet datasets from NLTK
positive_tweets = twitter_samples.strings('positive_tweets.json')
negative_tweets = twitter_samples.strings('negative_tweets.json')

# Combine tweets with labels
all_tweets = [(tweet, 'positive') for tweet in positive_tweets] + \
             [(tweet, 'negative') for tweet in negative_tweets]

# Shuffle the dataset
random.shuffle(all_tweets)

# Preprocessing function
def preprocess(tweet):
    tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True, reduce_len=True)
    stop_words = stopwords.words('english')
    words = tokenizer.tokenize(tweet)
    clean_words = [word for word in words if word not in stop_words and word not in string.punctuation]
    return clean_words

# Feature extraction function
def extract_features(words):
    return {word: True for word in words}

# Preprocess and extract features
featuresets = [(extract_features(preprocess(tweet)), label) for (tweet, label) in all_tweets]

# Split into training and test sets
train_set = featuresets[:7000]
test_set = featuresets[7000:]

# Train classifier
classifier = NaiveBayesClassifier.train(train_set)

# Evaluate classifier
print(f"Accuracy: {accuracy(classifier, test_set) * 100:.2f}%")

# Show most informative features
classifier.show_most_informative_features(10)

# Test on custom tweets
def analyze_sentiment(tweet):
    features = extract_features(preprocess(tweet))
    return classifier.classify(features)

# Example
sample_tweets = [
    "I love the new iPhone update!",
    "This is the worst day ever.",
    "I have no strong feelings one way or the other."
]

for tweet in sample_tweets:
    sentiment = analyze_sentiment(tweet)
    print(f"Tweet: {tweet} â†’ Sentiment: {sentiment}")
