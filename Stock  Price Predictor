pip install yfinance scikit-learn pandas matplotlib
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Download stock data
ticker = 'AAPL'  # Change to any stock symbol
df = yf.download(ticker, start='2015-01-01', end='2024-12-31')

# Use only the closing price
df = df[['Close']]

# Create lag features: Predict next day's price using previous n days
n_days = 5
for i in range(1, n_days + 1):
    df[f'lag_{i}'] = df['Close'].shift(i)

df.dropna(inplace=True)

# Features and labels
X = df[[f'lag_{i}' for i in range(1, n_days + 1)]]
y = df['Close']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=False, test_size=0.2)

# Train linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
predictions = model.predict(X_test)

# Evaluate
rmse = np.sqrt(mean_squared_error(y_test, predictions))
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")

# Plot results
plt.figure(figsize=(12,6))
plt.plot(y_test.index, y_test, label='Actual Price', linewidth=2)
plt.plot(y_test.index, predictions, label='Predicted Price', linestyle='--')
plt.title(f'{ticker} Stock Price Prediction using Linear Regression')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
